================

디버깅
IsDebuggerPresent,CheckRemoteDebuggerPresent 

암호/시리얼
컨트롤+B,cmp,text,je,jne


API 분석
MessageBoxA, printf, scanf

코드의 크기가 작은 경우 명령어를 하나 하나 실행하면서 동적 분석이 좋음.


=======
CTRL+B 문자열 검색 
:  주소에 특정 태그 붙이기
플로그인 즐겨찾기 사이에
문자열 및 함수 보는 버튼 존재.

==========
용어
PE 실행파일
실행 계열 : EXE, SCR.
라이브러리 계열 : DLL, OCX, CPL, DRV.
드라이버 계열 : SYS, VXD.
오브젝트 파일 계열 : OBJ.
================
환경설정 다음에서 중단 -> 시스템 중단점 해제하면 시작 지점에서 멈춘 상태로 디버깅 시작
메모리 맵 위에 문자열 참조에서 프로그램 코드가 참조되는 문자열을 보여줌

하단에 예외 발생 포인트에서 G키로 스택 포인터 분석 후 문제 지점 파악
해당 지점에 진입 포인트에서 ret 로 변경

packer/protector 시 파일 구조가 변경되어 일반적으로 분석안되므로 unpack필요

packer 실행 압축 유틸리티, 실행 파일의 코드, 데이터,리소스 등을 압축 시킨것
Protector 실행 압축 기능 외에 파일과 프로세스를 보호라혀는 목적으로 anti-debugging, anti-dump등이 추가됨.

dll을 분석 후 offset을 잡아 걸어보는 것도 하나의 방법임

=========
문자열 패치
유니코드 문자열은 2바이트 크기의 NULL로 끝나는 등 규칙이 있음.
해당 규칙의 맞게 HEX DUMP 드래그 후 HEX 값 편집

리틀 엔디언 : 윈도우, Intel x86 CPU
==========
자료형
Type / Name / SIZE / 
Byte / b    / 1   /
WORD / w    / 2   /
DWORD/ dw   / 4   /
cha[] / str / 6   /


===========
범용 레지스터 IA-32 기준 4바이트

EAX (Accumulator) : 계산용 레지스터(곱셈/나눗셈 결과 저장)
EBX (Base)  : 메모리 주소 계산 때 Base 주소
ECS (Counter) : 반복,shift 연산 카운터 역할
EDX (Data) : EAX와 함께 고정 크기 이상의 계산 때 사용

64bit 레지스터에서는
RAX
RBX
RCX
RDS로 적음.

64bit 운영체제에서 32bit로 컴파일된 코드 실행 시 EAX~~로 표기 하위 호환성 제공


EBP,ESI,EDI,ESP 는 주로 메모리 주소 포인터 저장
함수 호출 시 EBP에 ESP를 저장
리턴 직전에 ESP에 값이 다시 할당됨.
=================
Flag

Zeror Flag(ZF)
연산 명령 후에 결과 값이 0이되면 ZF가 1

Overflow Flag(OF)
signed integer의 오버플로 발생 시 1

Carry Flag(CF)
unsigned integer의 오버플로 발생 시 1

===================
스택 메모리 역할
1.함수 내의 로컬 변수 임시 저장
2.함수 호출 시 파라미터 저장
3.return address 저장.

push 될 때마다 값이 감소함.
RET는 값이 증가.
RET 8일경우 4+8해서 12

===================
명령어
PUSH 스택에 값을 입력
CALL 지정된 함수 호출
INC 값을 1증가
DEC 값을 1감소
JMP 지정된 주소 점수
CMP 2개의 operand 비교
JE (Jump if equal)ZF값이 1이면 점프

===================
흔한 함수 시작 구문
PUSH EBP
MOVE EBP, ESP (스택포인터를 EBP에저장)
~~
MOV ESP, EBP (돌아가기 ,다시 ESP에 할당)
POP EBP
RETN

======================
동작 구분	ESP 변화
local a, b	ESP -8
PUSH a, b	ESP -8
CALL c (리턴 주소)	ESP -4
총 변화량 (함수 내)	ESP -20
함수 c가 RET 8 → 복귀 시 ESP +12 (4 + 8) 증가
그냥 RET 면 스택 정리 필요.

=====================
함수호출 규약 (ESP 스택 포인터를 어떻게 정리할 것인가?)

cdecl
C언어 사용 방식 호출자에서 스택 정리

stdcall
호출되는 곳에서 정리 (윈도우 API)

FASTCALL stdcall과 유사하지만 함수의 전달하는 파라미터를 2개까지 레지스터를 이용하여 전달.


======================
VA는 프로세스 가상 메모리의 절대주소,,
RVA(Rela-tive Virtual Address)는 어느 기준 위치(ImgaeBase)에서부터의 상대주소.

RVA+ImageBase=VA

32비트 Windows OS에서 각 프로세스에게는 4GB 크기의 가상메모리가 할당.
프로세스에서의 VA값의 범위는 00000000~FFFFFFFF

PE헤더 : DOS Header,DOS Stub,NT Header ~Section header까지
PE바디 : 그밑 

IMAGE_DOS_HEADER 구조체 존재.
정상적인 모든 PE파일은 시작 부분(e_magic)에 DOS signature("MZ")가 존재
e_lfanew 값이 가리키는 위치에 NT Header 구조체가 존재해야함.

DOS Stub: 코드와 데이터의 혼합체, DOS로 실행시 작동하는 부분. 없어도 일반 OS에서 실행 가능함.


typedef struct _IMAGE_DOS_HEADER // DOS .EXE header
{
    WORD e_magic;       // Magic number
    WORD e_cblp;        // Byte on last page of file
    WORD e_cp;          // Pages in file
    WORD e_crlc;        // Relocations
    WORD e_cparhdr;     // Size of header in paragraphs
    WORD e_minalloc;    // Minimum extra paragraphs needed
    WORD e_maxalloc;    // Maximum extra paragraphs needed
    WORD e_ss;          // Initial (relative) SS value
    WORD e_sp;          // Checksum
    WORD e_ip;          // Initital IP value
    WORD e_cs;          // Initial (relative) CS value
    WORD e_lfarlc;      // File address of relocation table
    WORD e_ovno;        // Overlay number
    WORD e_res[4];      // Reserved words
    WORD e_oemid;       // OEM identifier (for e_oeminfo)
    WORD e_oeminfo;     // OEM information; e_oemid specific
    WORD e_res2[10];    // Reserved words
    LONG e_lfanew;      // File address of new exe header
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;


typedef struct _IMAGE_NT_HEADERS {
  DWORD                   Signature;
  IMAGE_FILE_HEADER       FileHeader;
  IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;
첫 멤버는 50450000h("PE"00) 값을 가짐.


typedef struct _IMAGE_FILE_HEADER {
  WORD  Machine;
  WORD  NumberOfSections;
  DWORD TimeDateStamp;
  DWORD PointerToSymbolTable;
  DWORD NumberOfSymbols;
  WORD  SizeOfOptionalHeader;
  WORD  Characteristics;
} IMAGE_FILE_HEADER, *PIMAG

Machine: cpu별 고유 값 Intel 호환 칩은 14C
NumberOfSections : 섹션 개수
SizeOfOptionalHeader : NT_HEADERS 구조체 마지막 멤버의 크기
(PE32+ 형태의 파일인 경우 HEADER64 구조체 사용)
Characteristics : 실행 가능한 형태인지 DLL이지 등 정보들이 bit OR 형식으로 조합됨.
exe 0002h ,DLL 2000h

=====================
RVA <-> RAW
RAW - PointerToRawData=RVA-VA
RAW=RVA-VA+PTD
즉 RVA가 존재하는 섹션(.text냐.data냐.rsrc냐)을 찾고
실제 메모리 주소 - ImageBase=H

